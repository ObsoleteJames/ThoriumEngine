
Shader
{
	Name = "Tools";
	Type = SHADER_DEBUG;
}

Global
{
	#include "common/common.hlsl"

	struct VS_Input
	{
		#include "common/vertex_input.hlsl"
	};

	struct PS_Input
	{
		float3 vPositionWs : TEXCOORD0;
		float3 vNormalWs : TEXCOORD1;

		float2 vTextureCoords : TEXCOORD2;

		nointerpolation float3 vVertexColor : TEXCOORD3;

		float3 vTangentUWs : TEXCOORD4;
		float3 vTangentVWs : TEXCOORD5;

		float4 vPositionPs : SV_POSITION;
	};

	Property<int> vType(Name = "Draw Type");
	Property<int> vInt1(Name = "Int1");
	Property<float> vVar1(Name = "Variable1");
	Property<float> vVar2(Name = "Variable2");
	Property<float> vVar3(Name = "Variable3");
	Property<float> vVar4(Name = "Variable4");
}

VS
{
	#include "common/vertex.hlsl"

	PS_Input Main(VS_Input input)
	{
		PS_Input output = ProcessVertex(input);

		// if (vType == 3)
		// {
		// 	float4 outPos = float4(output.vPositionWs, 1.f);
		// 	//float distanceFromCamera = length(vCameraPos - vObjectPos);
		// 	//outPos = mul(distanceFromCamera, outPos);
		// 	outPos = mul(vObjectMatrix, outPos);

		// 	output.vPositionWs = (float3)outPos;
		// 	output.vPositionPs = mul(vCameraMatrix, outPos);
		// }
		// else
			FinalizeVertex(input, output);
		return output;
	}
}

PS
{
	#define TYPE_GRID 1
	#define TYPE_SPRITE 2
	#define TYPE_GIZMO 3
	#define TYPE_SOLID 4

	float4 DrawGrid(PS_Input input)
	{
		float distanceFromCam = distance(vCameraPos, input.vPositionWs) / 100.f;
		float3 col = input.vVertexColor;

		col *= max(0.f, 1 - distanceFromCam);

		return float4(col, 1.f);
	}

	float4 DrawGizmo(PS_Input input)
	{
		float3 col = float3(0, 0, 0);

		if (vInt1 == 0)
			col = float3(0.7f, 0.2f, 0.2f);
		if (vInt1 == 1)
			col = float3(0.2f, 0.7f, 0.2f);
		if (vInt1 == 2)
			col = float3(0.2f, 0.2f, 0.7f);
		if (vInt1 == 3)
			col = float3(0.7f, 0.7f, 0.7f);

		if (vVar1 > 0.0)
			col = float3(1.f, 0.88f, 0.4f);

		float3 camRelativePos = vCameraPos - input.vPositionWs;
		float shade = max(0.5, dot(input.vNormalWs, normalize(camRelativePos)));
		col = mul(shade, col);

		return float4(col, 1.f);
	}

	float4 Main(PS_Input input) : SV_TARGET
	{
		float4 r = float4(1.f, 0.f, 0.f, 1.f);
		switch (vType)
		{
		case TYPE_GRID:
			r = DrawGrid(input);
			break;
		case TYPE_GIZMO:
			 r = DrawGizmo(input);
			break;
		case TYPE_SOLID:
			r = float4(1.f, 0.88f, 0.4f, 1.f);
			break;
		}
		if (r.a == 0.f)
			discard;
		return r;
	}
}
