
Shader
{
	Name = "GaussianBlurH";
	Type = SHADER_INTERNAL;
}

Global
{
	#include "common/common.hlsl"

	struct VS_Input
	{
		#include "common/vertex_input.hlsl"
	};

	struct PS_Input
	{
		#include "common/pixel_input.hlsl"
	};
}

PS
{
	static const float offset[5] = { 0.0, 1.0, 2.0, 3.0, 4.0 };
	static const float weight[5] = { 0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162 };

	Texture2D vColor : TEXTURE : register(t0);
	SamplerState vColorSampler : SAMPLER : register(s0);

	float4 Main(PS_Input input) : SV_TARGET
	{
		float3 col = SampleTexture2D(vColor, input.vTextureCoords).xyz * weight[0];

		uint texWidth;
		uint texHeight;
		uint texLevels;
		vColor.GetDimensions(0, texWidth, texHeight, texLevels);

		for (int i = 1; i < 5; i++)
		{
			col += SampleTexture2D(vColor, input.vTextureCoords + (float2(offset[i], 0) / float(texWidth))) * weight[i];
			col += SampleTexture2D(vColor, input.vTextureCoords - (float2(offset[i], 0) / float(texWidth))) * weight[i];
		}

		return float4(col, 1.f);
	}
}
